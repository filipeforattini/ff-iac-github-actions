name: svc-version


#--------------------------------------------------#
#                     Triggers                     # 
#--------------------------------------------------#
on:

  workflow_call:
    inputs:
      language:
        type: string
        required: false
        default: "undetected"
        description: "Main language of the repository"
      mainBranch:
        type: string
        required: false
        default: master
        description: "Main repository branch may interfere with versioning"
      autoVersioning:
        type: boolean
        required: false
        default: true
        description: "Enable auto versioning with semantic versioning"
      nodeMatrix:
        type: string
        required: false
        default: '[14, 16, 17]'
      nodeVersion:
        type: string
        required: false
        default: '17'
      pythonMatrix:
        type: string
        required: false
        default: '["3.8", "3.9", "3.10"]'
      pythonVersion:
        type: string
        required: false
        default: '3.10'
      goMatrix:
        type: string
        required: false
        default: '["1.18"]'
      goVersion:
        type: string
        required: false
        default: '1.18'

    secrets:
      PIPELINE_DEPLOY_TOKEN:
        required: true

    outputs:
      version: 
        description: "Version"
        value: ${{jobs.Release-Node.outputs.Version}}${{jobs.Release-Python.outputs.Version}}${{jobs.Release-Go.outputs.Version}}

#--------------------------------------------------#
#                  Workflow Jobs                   # 
#--------------------------------------------------#
jobs:

  #--------------------------------------------------#
  #                  Tests: Node.js                  # 
  #--------------------------------------------------#
  Tests-Node:
    runs-on: ubuntu-latest
    if: inputs.language == 'javascript'

    strategy:
      matrix:
        node-version: ${{fromJSON(inputs.nodeMatrix)}}
    
    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v4

      - name: Setup | Cloning tools
        uses: actions/checkout@v4
        with:
          ref: main
          path: .pipeline
          repository: filipeforattini/ff-iac-github-actions

      - name: Install | Node.js ${{matrix.node-version}}
        uses: actions/setup-node@v3
        with:
          node-version: ${{matrix.node-version}}

      - name: Install | Dependency managers
        run: npm -g install npm yarn pnpm && npm -v && yarn -v && pnpm -v

      # install dependencies
      - name: Install dependencies
        run: |
          if test -f ./pnpm-lock.yaml; then pnpm i --frozen-lockfile --force --no-color; fi
          if test -f ./yarn.lock; then yarn install --frozen-lockfile --ignore-optional --immutable --network-timeout 1000000; fi
          if test -f ./package-lock.json; then npm ci --force --no-fund --no-audit --maxsockets 1; fi

      # run scripts
      - name: Run linter
        run: npm run lint --if-present

      - name: Run tests
        run: npm run test --if-present


  #--------------------------------------------------#
  #                  Tests: Python                   # 
  #--------------------------------------------------#
  Tests-Python:
    runs-on: ubuntu-latest
    if: inputs.language == 'python'

    strategy:
      matrix:
        python-version: ${{fromJSON(inputs.pythonMatrix)}}
    
    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v4

      - name: Setup | Dependencies
        uses: filipeforattini/ff-iac-github-actions/.github/actions/setup-binaries@main
        with:
          python: ${{matrix.python-version}}
          poetry: 1.5.1

      - name: Install dependencies
        run: |
          if test -f ./pyproject.toml; then poetry install; fi
          if test -f ./requirements.txt; then pip install --upgrade -r requirements.txt; fi
          if test -f ./makefile; then make install; fi

  #--------------------------------------------------#
  #                    Tests: Go                     #
  #--------------------------------------------------#
  Tests-Go:
    runs-on: ubuntu-latest
    if: inputs.language == 'go'
    
    strategy:
      matrix:
        go-version: ${{fromJSON(inputs.goMatrix)}}

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v4
        with:
          token: ${{secrets.PIPELINE_DEPLOY_TOKEN}}

      - name: Setup | Dependencies
        uses: filipeforattini/ff-iac-github-actions/.github/actions/setup-binaries@main
        with:
          go: ${{matrix.go-version}}

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{runner.os}}-go-${{hashFiles('**/go.sum')}}
          restore-keys: |
            ${{runner.os}}-go
    
      - name: Download dependencies
        run: go mod download


  #--------------------------------------------------#
  #                 Release: Node.js                 # 
  #--------------------------------------------------#
  Release-Node:
    runs-on: ubuntu-latest
    needs: Tests-Node

    outputs:
      Version: ${{steps.versioning.outputs.version}}

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup | Pipeline config scrapper
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        id: analysis

      # release
      - name: Semantic Release
        uses: filipeforattini/ff-iac-github-actions/.github/actions/pack-semantic-release@main
        if: inputs.autoVersioning
        continue-on-error: true
        with:
          writeSummary: true
          token: "${{secrets.PIPELINE_DEPLOY_TOKEN}}"
          installNode: true
          npmPlugin: true
          defaultBranch: ${{inputs.mainBranch}}
          author: ${{steps.analysis.outputs.commiter_name}} 
          email: ${{steps.analysis.outputs.commiter_email}}
          files: '["package.json","dist/**/*.{js,css}"]'
          
      - name: Current Version
        id: versioning
        run: |
          echo "version=$(cat package.json | jq -r '.version')" >> $GITHUB_OUTPUT
          echo -e "\n\nINFO  current version = $(cat package.json | jq -r '.version')\n\n"


  #--------------------------------------------------#
  #                 Release: Python                  # 
  #--------------------------------------------------#
  Release-Python:
    runs-on: ubuntu-latest
    needs: Tests-Python

    outputs:
      Version: ${{steps.versioning.outputs.version}}

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup | Pipeline config scrapper
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        id: analysis

      # release
      - name: Semantic Release
        uses: filipeforattini/ff-iac-github-actions/.github/actions/pack-semantic-release@main
        if: inputs.autoVersioning
        with:
          writeSummary: true
          token: "${{secrets.PIPELINE_DEPLOY_TOKEN}}"
          installNode: true
          npmPlugin: false
          defaultBranch: ${{inputs.mainBranch}}
          author: ${{steps.analysis.outputs.commiter_name}} 
          email: ${{steps.analysis.outputs.commiter_email}}
          files: '[]'

      - name: Next Version
        id: versioning
        run: |
          NEXT_VERSION=$(git for-each-ref --sort=authordate --format '%(refname)' refs/tags | tail -n 1 | sed -n -e 's/^.*refs\/tags\/v//p')
          echo "next version = $NEXT_VERSION"
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT


  #--------------------------------------------------#
  #                    Release: Go                   # 
  #--------------------------------------------------#
  Release-Go:
    runs-on: ubuntu-latest
    needs: Tests-Go

    outputs:
      Version: ${{steps.versioning.outputs.version}}

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup | Pipeline config scrapper
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        id: analysis

      # release
      - name: Semantic Release
        uses: filipeforattini/ff-iac-github-actions/.github/actions/pack-semantic-release@main
        if: inputs.autoVersioning
        with:
          writeSummary: true
          token: "${{secrets.PIPELINE_DEPLOY_TOKEN}}"
          installNode: true
          npmPlugin: false
          defaultBranch: ${{inputs.mainBranch}}
          author: ${{steps.analysis.outputs.commiter_name}} 
          email: ${{steps.analysis.outputs.commiter_email}}
          files: '[]'

      - name: Next Version
        id: versioning
        run: |
          NEXT_VERSION=$(git for-each-ref --sort=authordate --format '%(refname)' refs/tags | tail -n 1 | sed -n -e 's/^.*refs\/tags\/v//p')
          echo "next version = $NEXT_VERSION"
          echo "name=version=$NEXT_VERSION" >> $GITHUB_OUTPUT



  #--------------------------------------------------#
  #               Release: Undetected                # 
  #--------------------------------------------------#
  Release-Undetected:
    runs-on: ubuntu-latest
    if: inputs.language == 'undetected'

    outputs:
      Version: ${{steps.versioning.outputs.version}}

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup | Pipeline config scrapper
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        id: analysis

      # release
      - name: Semantic Release
        uses: filipeforattini/ff-iac-github-actions/.github/actions/pack-semantic-release@main
        if: inputs.autoVersioning
        with:
          writeSummary: true
          token: ${{secrets.PIPELINE_DEPLOY_TOKEN}}
          installNode: true
          npmPlugin: false
          defaultBranch: ${{inputs.mainBranch}}
          author: ${{steps.analysis.outputs.commiter_name}} 
          email: ${{steps.analysis.outputs.commiter_email}}
          files: '[]'

      - name: Next Version
        id: versioning
        run: |
          NEXT_VERSION=$(git for-each-ref --sort=authordate --format '%(refname)' refs/tags | tail -n 1 | sed -n -e 's/^.*refs\/tags\/v//p')
          echo "next version = $NEXT_VERSION"
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
