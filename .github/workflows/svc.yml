name: svc

concurrency:
  group: ${{github.workflow}}-${{github.event_name}}


#--------------------------------------------------#
#                     Triggers                     # 
#--------------------------------------------------#
on:

  workflow_call:
    inputs:
      mainBranch:
        type: string
        required: false
        default: master
        description: "Main repository branch may interfere with versioning"
      ecosystem:
        type: string
        required: false
        description: "Special prefix that will be added to the image name"
      containerRegistry:
        type: string
        required: false
        default: ghcr.io
        description: "Container registry to upload container images"
      environmentsAsNamespaces:
        type: boolean
        required: false
        default: false
        description: "Separate environments as namespaces"
      staticAnalysis:
        type: boolean
        required: false
        default: false
        description: "Enable static analysis scans"
      autoVersioning:
        type: boolean
        required: false
        default: true
        description: "Enable auto versioning with semantic versioning"
      nodeMatrix:
        type: string
        required: false
        default: '[16, 17, 18]'
      nodeVersion:
        type: string
        required: false
        default: '18'
      pythonMatrix:
        type: string
        required: false
        default: '["3.8", "3.9", "3.10"]'
      pythonVersion:
        type: string
        required: false
        default: '3.10'
      goMatrix:
        type: string
        required: false
        default: '["1.18"]'
      goVersion:
        type: string
        required: false
        default: '1.18'
      platforms:
        type: string
        required: false
        default: "linux/amd64,linux/arm/v7,linux/arm64"
        description: "Multi-plataform container builds"


#--------------------------------------------------#
#                  Workflow Jobs                   # 
#--------------------------------------------------#
jobs:

  #--------------------------------------------------#
  #                    Setup Jobs                    # 
  #--------------------------------------------------#
  Setup:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      Event: ${{steps.analysis.outputs.event}}
      Analysis: ${{steps.analysis.outputs.result}}
      Language: ${{steps.analysis.outputs.language}}
      Environment: ${{steps.analysis.outputs.environment}}

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v4

      # job
      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        env:
          PIPESECRET_KUBE_CONFIG: ${{secrets.KUBE_CONFIG}}
          PIPESECRET_REGISTRY_PASSWORD: ${{secrets.REGISTRY_PASSWORD}}
          PIPESECRET_REGISTRY_USERNAME: ${{secrets.REGISTRY_USERNAME}}
          PIPESECRET_PIPELINE_DEPLOY_TOKEN: ${{secrets.PIPELINE_DEPLOY_TOKEN}}
        with:
          writeSummary: true
          evaluateSecrets: true
          containerRegistry: ${{inputs.containerRegistry}}


  #--------------------------------------------------#
  #                  Static Analysis                 # 
  #--------------------------------------------------#
  Static-Analysis:
    runs-on: ubuntu-latest
    if: needs.Setup.outputs.Event == 'push'
    needs: Setup

    permissions:
      security-events: write

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v4
        if: inputs.staticAnalysis
        with:
          token: "${{secrets.GITHUB_TOKEN}}"
          fetch-depth: '0'
          persist-credentials: false

      #job
      - name: Run code analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/pack-static-code-analysis@main
        if: inputs.staticAnalysis
        with:
          token: "${{secrets.PIPELINE_DEPLOY_TOKEN}}"
          language: ${{needs.Setup.outputs.Language}}


  #--------------------------------------------------#
  #                Tests-And-Version                 # 
  #--------------------------------------------------#
  Tests-And-Version:    
    uses: filipeforattini/ff-iac-github-actions/.github/workflows/svc-version.yml@main
    needs: Setup
    if: needs.Setup.outputs.event == 'push'

    secrets:
      PIPELINE_DEPLOY_TOKEN: ${{secrets.PIPELINE_DEPLOY_TOKEN}}

    with:
      language: ${{needs.Setup.outputs.Language}}
      mainBranch: ${{inputs.mainBranch}}
      nodeMatrix: ${{inputs.nodeMatrix}}
      nodeVersion: ${{inputs.nodeVersion}}
      pythonMatrix: ${{inputs.pythonMatrix}}
      pythonVersion: ${{inputs.pythonVersion}}
      goMatrix: ${{inputs.goMatrix}}
      goVersion: ${{inputs.goVersion}}


  #--------------------------------------------------#
  #                      Trigger                     # 
  #--------------------------------------------------#
  Trigger-Build:
    runs-on: ubuntu-latest
    needs: Tests-And-Version

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v4
        with:
          token: "${{secrets.PIPELINE_DEPLOY_TOKEN}}"

      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        with:
          containerRegistry: ${{inputs.containerRegistry}}

      - name: Trigger
        run: |
          git config --global user.name "${{steps.analysis.outputs.commiter_name}}"
          git config --global user.email "${{steps.analysis.outputs.commiter_email}}"
          git fetch
          git checkout -B env/dev
          git commit --allow-empty -am "deploy: to dev [skip ci]\\nVersion: ${{needs.Release-Node.outputs.Version}}\nCommit: ${{steps.setup.outputs.commit_hash}}"
          git push -f -u origin env/dev

      - uses: altinukshini/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{secrets.PIPELINE_DEPLOY_TOKEN}}"
          environment: dev


  #--------------------------------------------------#
  #                  Trigger Manual                  # 
  #--------------------------------------------------#
  Trigger-Manual:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    needs: 
      - Setup

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v4
        with:
          token: "${{secrets.PIPELINE_DEPLOY_TOKEN}}"

      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        with:
          containerRegistry: ${{inputs.containerRegistry}}

      - name: Trigger
        run: |
          git config --global user.name "pipeline-bot"
          git config --global user.email "pipeline-bot"
          git fetch
          git checkout -B env/${{steps.analysis.outputs.environment}}
          git commit --allow-empty -am "deploy: to ${{steps.analysis.outputs.environment}} [skip ci]\nCommit: ${{steps.setup.outputs.commit_hash}}"
          git push -f -u origin env/${{steps.analysis.outputs.environment}}

      - uses: altinukshini/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{secrets.PIPELINE_DEPLOY_TOKEN}}"
          environment: ${{steps.analysis.outputs.environment}}


  #--------------------------------------------------#
  #                       Build                      # 
  #--------------------------------------------------#
  Build:
    uses: filipeforattini/ff-iac-github-actions/.github/workflows/svc-build.yml@main
    needs: Setup
    if: needs.Setup.outputs.event == 'deployment'

    secrets:
      REGISTRY_USERNAME: ${{secrets.REGISTRY_USERNAME}}
      REGISTRY_PASSWORD: ${{secrets.REGISTRY_PASSWORD}}

    with:
      platforms: ${{inputs.platforms}}
      containerRegistry: ${{inputs.containerRegistry}}
      language: ${{needs.Setup.outputs.Language}}
      environment: ${{needs.Setup.outputs.Environment}}
      nodeVersion: ${{inputs.nodeVersion}}
      pythonVersion: ${{inputs.pythonVersion}}
      goVersion: ${{inputs.goVersion}}


  #--------------------------------------------------#
  #                       Deploy                     # 
  #--------------------------------------------------#
  Deploy:
    runs-on: ubuntu-latest
    environment: ${{needs.Setup.outputs.Environment}}
    needs: Build

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
        
      - name: Setup | Cloning tools
        uses: actions/checkout@v4
        with:
          ref: main
          path: .pipeline
          repository: filipeforattini/ff-iac-github-actions

      - name: Setup | Dependencies
        uses: filipeforattini/ff-iac-github-actions/.github/actions/setup-binaries@main
        with:
          token: "${{secrets.GITHUB_TOKEN}}"
          docker-qmeu: true
          docker-buildx: true
          kubectl: true
          ytt: true
          yq: true

      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        with:
          containerRegistry: ${{inputs.containerRegistry}}

      - name: Config | Version
        id: versioning
        run: |
          NEXT_VERSION=$(git for-each-ref --sort=authordate --format '%(refname)' refs/tags | tail -n 1 | sed -n -e 's/^.*refs\/tags\/v//p')
          echo "next version = $NEXT_VERSION"
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Config | Kubectl config file
        env:
          KUBE_CONFIG: ${{secrets.KUBE_CONFIG}}
        run: |
          mkdir -p ~/.kube
          echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config

      # dependencies
      - name: Create k8s dependencies
        uses: filipeforattini/ff-iac-github-actions/.github/actions/k8s-install-dependencies@main
        with:
          token: "${{secrets.GITHUB_TOKEN}}"
          cloneTools: false
          writeSummary: true
          version: ${{steps.versioning.outputs.version}}
          repository: ${{steps.analysis.outputs.repository}}
          namespace: ${{steps.analysis.outputs.deploy_namespace}}

      # configs
      - name: K8s create config-map
        if: steps.analysis.outputs.feature_has_configs 
        run: |
          kubectl create configmap -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}} --from-env-file=${{steps.analysis.outputs.deploy_configs_file}} --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl create configmap -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}}-${{steps.versioning.outputs.version}} --from-env-file=${{steps.analysis.outputs.deploy_configs_file}} --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl get configmap -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}} -o jsonpath='{.data}' | jq -r 'keys[]' |  tr '\n' '~' | sed 's/~/,/g;s/,$//' > ./manifests/k8s-configs-keys.txt

      # secrets
      - name: Decrypt secrets
        if: steps.analysis.outputs.feature_has_secrets
        run: |
          gpg \
            --yes --batch --quiet --decrypt \
            --passphrase="${{secrets.GPG_PASSPHRASE}}" \
            --output ./manifests/k8s-secrets.env \
            ${{steps.analysis.outputs.deploy_secrets_file}}

      - name: K8s create secrets
        if: steps.analysis.outputs.feature_has_secrets
        run: |
          kubectl create secret generic -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}} --from-env-file=./manifests/k8s-secrets.env --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl create secret generic -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}}-${{steps.versioning.outputs.version}} --from-env-file=./manifests/k8s-secrets.env --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl get secret -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}} -o jsonpath='{.data}' | jq -r 'keys[]' |  tr '\n' '~' | sed 's/~/,/g;s/,$//' > ./manifests/k8s-secrets-keys.txt

      # secrets for registry auth
      - name: Config | Login to Container Registry
        uses: docker/login-action@v2
        with:
          logout: false
          registry: ${{inputs.containerRegistry}}
          username: "${{secrets.REGISTRY_USERNAME}}"
          password: "${{secrets.REGISTRY_PASSWORD}}"

      - name: Config | Gives runner access to docker config file 
        run: |
          sudo chown $(whoami):docker /home/$(whoami)/.docker/config.json
          cp /home/$(whoami)/.docker/config.json ./manifests/docker-config.json

      - name: K8s create registry-token secret
        run: kubectl create secret generic -n ${{steps.analysis.outputs.deploy_namespace}} registry-token --type=kubernetes.io/dockerconfigjson --from-file=.dockerconfigjson=./manifests/docker-config.json --dry-run=client --validate=false --output=yaml | kubectl apply -f -

      # generate k8s manifests
      - name: K8s generates final yml
        run: |
          CONFIGS_LIST=$(if test -f ./manifests/k8s-configs-keys.txt; then cat ./manifests/k8s-configs-keys.txt; else echo ''; fi)
          SECRETS_LIST=$(if test -f ./manifests/k8s-secrets-keys.txt; then cat ./manifests/k8s-secrets-keys.txt; else echo ''; fi)
          DEPENDENCIES_LIST=$(if test -f ./manifests/k8s-dependencies.yml; then (cat ./manifests/k8s-dependencies.yml | yq -P '.dependencies'); else echo '' ; fi)
          ytt \
            -f ./.pipeline/deploy/as-k8s/service.schema.yml \
            -f ./.pipeline/deploy/as-k8s/service \
            -f ./manifests/k8s.yml \
            --data-value                                      ecosystem=${{steps.analysis.outputs.ecosystem}} \
            --data-value                                   organization=${{steps.analysis.outputs.organization}} \
            --data-value                                     repository=${{steps.analysis.outputs.repository}} \
            --data-value                                    environment=${{steps.analysis.outputs.environment}} \
            --data-value                              containerRegistry=${{inputs.containerRegistry}} \
            --data-value                                            tag=${{steps.analysis.outputs.deploy_tag}} \
            --data-value-yaml               deployment.imagePullSecrets=true \
            --data-value-yaml                            envFromSecrets="[$SECRETS_LIST]" \
            --data-value-yaml                         envFromConfigMaps="[$CONFIGS_LIST]" \
            --data-value-yaml                       envFromDependencies="[$DEPENDENCIES_LIST]" \
            --data-value                       pipelineControl.datetime=${{steps.analysis.outputs.executed_at}} \
            --data-value-yaml  pipelineControl.environmentsAsNamespaces=${{inputs.environmentsAsNamespaces}} \
              > ./manifests/k8s-to-apply.yml

      - name: Docs | K8s summary
        run: |
          CONFIGS_LIST=$(if test -f ./manifests/k8s-configs-keys.txt; then cat ./manifests/k8s-configs-keys.txt; else echo ''; fi)
          SECRETS_LIST=$(if test -f ./manifests/k8s-secrets-keys.txt; then cat ./manifests/k8s-secrets-keys.txt; else echo ''; fi)
          DEPENDENCIES_LIST=$(if test -f ./manifests/k8s-dependencies.yml; then (cat ./manifests/k8s-dependencies.yml | yq -P '.dependencies'); else echo ''; fi)
          echo -e "### k8s\n\n" >> $GITHUB_STEP_SUMMARY
          echo -e "| param | value |" >> $GITHUB_STEP_SUMMARY
          echo -e "| --- | :---: |" >> $GITHUB_STEP_SUMMARY
          echo -e "| secrets | $SECRETS_LIST |" >> $GITHUB_STEP_SUMMARY
          echo -e "| configs | $CONFIGS_LIST |" >> $GITHUB_STEP_SUMMARY
          echo -e "| dependencies | $DEPENDENCIES_LIST |" >> $GITHUB_STEP_SUMMARY
          echo -e "<details><summary>📝 kubefile</summary>\n\n\`\`\`yml \n$(cat ./manifests/k8s-to-apply.yml)\n \`\`\`\n </details>\n\n" >> $GITHUB_STEP_SUMMARY

      - name: K8s apply yml
        run: |
          kubectl apply -f ./manifests/k8s-to-apply.yml
          kubectl get pods -n ${{steps.analysis.outputs.deploy_namespace}}
