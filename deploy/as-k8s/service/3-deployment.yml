#@ load("@ytt:md5", "md5")
#@ load("@ytt:data", "data")
#@ load("@ytt:json", "json")
#@ load("@ytt:sha256", "sha256")
#@ load("@ytt:base64", "base64")

#@ def ListToMap (listOfMaps):
#@    newMap = {}
#@    for i in range(len(listOfMaps)):
#@        newMap.update({ listOfMaps[i].name: listOfMaps[i].value })
#@    end
#@    return newMap
#@ end

#@ load("@ytt:data", "data")
---
#@ if data.values.deployment.enable:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ data.values.deployment.name
  labels: #@ data.values.deployment.labels
  annotations: #@ data.values.deployment.annotations
spec:
  replicas: #@ data.values.deployment.replicas

  selector:
    #@ if data.values.deployment.matchLabels.overwrite:
    matchLabels: #@ data.values.deployment.matchLabels.labels
    #@ else:
    #@ deploymentMatchLabels = {}
    #@ deploymentMatchLabels.update({ "pipeline/selector": data.values.repository + "." + data.values.deployment.name })
    matchLabels: #@ deploymentMatchLabels
    #@ end
  
  template:
    metadata:
      #@ deploymentTemplateLabels = {}
      #@ deploymentTemplateLabels.update({ "pipeline/selector": data.values.repository + "." + data.values.deployment.name })
      #@ deploymentTemplateLabels.update(data.values.deployment.templateLabels)
      labels: #@ deploymentTemplateLabels
    spec:
      restartPolicy: Always
      
      #@ if data.values.environment == "prd":
      nodeSelector: #@ ListToMap(data.values.deployment.prd-nodeSelector)
      #@ elif data.values.environment == "stg":
      nodeSelector: #@ ListToMap(data.values.deployment.stg-nodeSelector)
      #@ elif hasattr(data.values.deployment, "nodeSelector"):
      nodeSelector: #@ ListToMap(data.values.deployment.nodeSelector)
      #@ else:
      nodeSelector: {}  #@ // Provide a default empty map if no nodeSelector is defined
      #@ end

      #@ if data.values.environment == "prd":
      #@ if data.values.deployment.prd-tolerations:
      tolerations:
        #@ for tol in data.values.deployment.prd-tolerations:
        - key: #@ tol.key
          operator: #@ tol.operator
          effect: #@ tol.effect
        #@ end
      #@ end
      #@ elif data.values.environment == "stg":
      #@ if data.values.deployment.stg-tolerations:
      tolerations:
        #@ for tol in data.values.deployment.stg-tolerations:
        - key: #@ tol.key
          operator: #@ tol.operator
          effect: #@ tol.effect
        #@ end
      #@ end
      #@ else:
      #@ if data.values.deployment.tolerations:
      tolerations:
        #@ for tol in data.values.deployment.tolerations:
        - key: #@ tol.key
          operator: #@ tol.operator
          effect: #@ tol.effect
        #@ end
      #@ end
      #@ end

      #@ if/end data.values.deployment.imagePullSecrets:
      imagePullSecrets:
        - name: #@ data.values.deployment.imagePullSecretsName

      containers:
        - name: #@ data.values.deployment.name
          image: #@ "{}/{}/{}:{}".format(data.values.containerRegistry, data.values.organization, data.values.repository, data.values.tag)
          ports:
            - containerPort: #@ data.values.port
          #@ for/end portNumber in data.values.deployment.ports:
            - containerPort: #@ portNumber

          #@  deploymentResources = {
          #@    "limits": ListToMap(data.values.deployment.resources.limits),
          #@    "requests": ListToMap(data.values.deployment.resources.requests),
          #@  }
          resources: #@ deploymentResources

          #@ deploymentEnvs = []
          #@ deploymentEnvs.extend(data.values.env)
          
          #@ for i in data.values.envFromConfigMaps:
          #@   deploymentEnvs.extend([{ 
          #@    "name": i, 
          #@    "valueFrom": {
          #@      "configMapKeyRef": {
          #@        "name": data.values.repository,
          #@        "key": i,
          #@      }
          #@    }
          #@   }])
          #@ end
          
          #@ for i in data.values.envFromSecrets:
          #@   deploymentEnvs.extend([{ 
          #@    "name": i, 
          #@    "valueFrom": {
          #@      "secretKeyRef": {
          #@        "name": data.values.repository,
          #@        "key": i,
          #@      }
          #@    }
          #@   }])
          #@ end
          
          #@ for i in data.values.envFromDependencies:
          #@   deploymentEnvs.extend([{ 
          #@    "name": (i + "_connection_string").upper(),
          #@    "valueFrom": {
          #@      "secretKeyRef": {
          #@        "name": "dep-secret-" + i,
          #@        "key": "connection-string",
          #@      }
          #@    }
          #@   }])
          #@ end
          env: #@ deploymentEnvs
#@ end
